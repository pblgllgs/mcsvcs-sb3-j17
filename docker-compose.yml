version: '3.8'
services:

  user-service:
    container_name: user-service
    image: pblgllgs/user-service-j17-sb3:0.0.2
    environment:
      SPRING_PROFILES_ACTIVE: ${USERS_SERVICE_ENVIRONMENT}
      SPRING_CONFIG_IMPORT: ${CONFIG_SERVER_URL}
    ports:
      - "8083:8083"
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      mysql_db_users:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      rabbitmq:
         condition: service_healthy
    networks:
      - microservices_net
      - mysql_net

  accounts-management-service:
    container_name: accounts-management-service
    image: pblgllgs/account-management-service-j17-sb3:0.0.2
    environment:
      SPRING_PROFILES_ACTIVE: ${ACCOUNTS_MANAGEMENT_SERVICE_ENVIRONMENT}
      SPRING_CONFIG_IMPORT: ${CONFIG_SERVER_URL}
    ports:
      - "8082:8082"
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      api-gateway:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices_net

  albums-service:
    container_name: albums-service
    image: pblgllgs/album-service-j17-sb3:0.0.2
    environment:
      SPRING_PROFILES_ACTIVE: ${ALBUMS_SERVICE_ENVIRONMENT}
      SPRING_CONFIG_IMPORT: ${CONFIG_SERVER_URL}
    ports:
      - "8081:8081"
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      postgres_db_albums:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices_net
      - postgres_net

  api-gateway:
    container_name: api-gateway
    image: pblgllgs/api-gateway-j17-sb3:0.0.2
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${API_GATEWAY_ENVIRONMENT}
      SPRING_CONFIG_IMPORT: ${CONFIG_SERVER_URL}
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
        discovery-service:
          condition: service_healthy
        config-server:
          condition: service_healthy
    networks:
      - microservices_net

  discovery-service:
    container_name: discovery-service
    image: pblgllgs/discovery-service-j17-sb3:0.0.2
    environment:
      SPRING_PROFILES_ACTIVE: ${DISCOVERY_SERVICE_ENVIRONMENT}
      SPRING_CONFIG_IMPORT: ${CONFIG_SERVER_URL}
    ports:
      - "8761:8761"
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - microservices_net

  config-server:
    container_name: config-server
    image: pblgllgs/config-server-j17-sb3:0.0.2
    ports:
      - "8888:8888"
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: '*'
    env_file:
      - .env
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - microservices_net

  mysql_db_users:
    container_name: mysql_db_users
    image: mysql:8.0.32
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_USERNAME: root
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: db_users
    ports:
      - "3306:3306"
    volumes:
      - volume_mysql_db_users:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=password --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10
    networks:
      - mysql_net

  postgres_db_albums:
    container_name: postgres_db_albums
    image: postgres:14.3
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db_albums
    ports:
      - "5432:5432"
    volumes:
      - volume_postgres_db_albums:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U postgres | grep 'accepting connections' || exit 1"
      interval: 2s
      timeout: 20s
      retries: 10
    networks:
      - postgres_net

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: "rabbitmq-diagnostics -q ping | grep 'Ping succeeded' || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - microservices_net

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices_net


volumes:
  volume_mysql_db_users:
    external: false
  volume_postgres_db_albums:
    external: false

networks:
  microservices_net:
    driver: bridge
  mysql_net:
    driver: bridge
  postgres_net:
    driver: bridge